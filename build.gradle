plugins {
    id 'base'
    id 'org.jetbrains.kotlin.jvm' version '2.2.0'
    id 'org.jetbrains.kotlin.kapt' version '2.2.0'
}

allprojects {
    group = findProperty('group') as String
    version = findProperty('baseVersion') as String
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.kapt'
    apply plugin: 'signing'

    def projName = project.name

    publishing {
        repositories {
            mavenCentral() {
                credentials {
                    username = findProperty('centralPortalUsername') as String
                    password = findProperty('centralPortalPassword') as String
                }
            }

            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/EventHorizonLab/SPI-Tooling")
                credentials {
                    username = findProperty('gprUser') ?: System.getenv('GITHUB_ACTOR')
                    password = findProperty('gprToken') ?: System.getenv('GITHUB_TOKEN')
                }
            }
        }

        publications {
            create('maven', MavenPublication) {
                from components.java
                artifactId = "${rootProject.name}-${projName}"
                groupId = rootProject.group as String
                version = rootProject.version as String
                pom {
                    name = artifactId
                    description = "A module of the ${rootProject.name} project."
                    url = 'https://github.com/EventHorizonLab/SPI-Tooling'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/license/mit'
                        }
                    }
                    developers {
                        developer {
                            id = 'eventhorizonlab'
                            name = 'EventHorizonLab'
                            url = 'https://github.com/EventHorizonLab'
                        }
                    }
                    scm {
                        url = 'https://github.com/EventHorizonLab/spi-tooling'
                        connection = 'scm:git:https://github.com/EventHorizonLab/spi-tooling.git'
                        developerConnection = 'scm:git:ssh://git@github.com:EventHorizonLab/spi-tooling.git'
                    }
                }
            }
        }
    }

    signing {
        def signingKey = findProperty('signingKey') as String
        def signingPassword = findProperty('signingPassword') as String

        if (signingKey && signingPassword) {
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.maven
        } else {
            println "⚠️  Signing key or password not found. Skipping signing for project $projName."
        }
    }

    tasks.withType(PublishToMavenLocal).configureEach { t ->
        doLast {
            def pub = t.publication
            if (pub instanceof MavenPublication) {
                def coords = "${pub.groupId}:${pub.artifactId}:${pub.version}"
                println ""
                println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                println "📦 Published to Maven Local"
                println "   Coordinates : $coords"
                println "   Repository  : mavenLocal (~/.m2/repository)"
                println "   Artifacts   :"
                pub.artifacts.each { art ->
                    println "      • ${art.file.name}  →  ${art.file}"
                }
                println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                println ""
            } else {
                println "⚠️  Task ${t.path} did not publish a MavenPublication"
            }
        }
    }

    // "3W@w[`rzTvh_1>-~N_{=z{$W#s@-c

    tasks.withType(PublishToMavenRepository).configureEach {
        doLast {
            def pub = it.publication
            if (pub instanceof MavenPublication) {
                def coords = "${pub.groupId}:${pub.artifactId}:${pub.version}"
                println ""
                println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                println "📦 Published to Remote Repository"
                println "   Coordinates : $coords"
                println "   Repository  : ${it.repository.url}"
                println "   Artifacts   :"
                pub.artifacts.each { art ->
                    println "      • ${art.file.name}  →  ${art.file}"
                }
                println "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                println ""
            } else {
                println "⚠️  Task ${it.path} did not publish a MavenPublication"
            }
        }
    }
}

tasks.register('copyJar', Copy) {
    description = 'Collects all subproject jars into the root build/ directory'
    group = 'build'
    dependsOn subprojects.collect { it.tasks.matching { it.name == 'jar' } }
    from subprojects.collect { proj -> proj.tasks.named('jar').flatMap { it.archiveFile } }
    into layout.buildDirectory.dir('libs')
}
